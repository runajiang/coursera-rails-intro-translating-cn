WEBVTT

1
00:00:07.890 --> 00:00:10.260
Welcome to lecture one of module two.
欢迎进入第一节课第二讲。

2
00:00:10.260 --> 00:00:14.910
In this lecture,
we'll discuss the brief history of Ruby.
在这节课，我们将讨论Ruby的简史

3
00:00:14.910 --> 00:00:19.130
We'll also go over why Ruby is such
an interesting language to learn,
我们也会了解为什么，在这么多种编程语言里

4
00:00:19.130 --> 00:00:21.550
among the other myriad of
programming languages out there.
Ruby尤为有趣的，值得学习

5
00:00:23.160 --> 00:00:27.170
We'll also cover some basic Ruby
principles and conventions.
我们也会学一些基础的Ruby法则和惯例

6
00:00:27.170 --> 00:00:29.860
Ruby was invented by Yukihiro Matsumoto,
Ruby是在1996年发明的

7
00:00:29.860 --> 00:00:33.780
who people affectionately call Matz,
around 1996.
人们亲切地称呼发明者Yukihiro Matsumoto为Matz

8
00:00:33.780 --> 00:00:37.456
It sort of stayed quiet
after that until about 2005,
2005年以前，这门语言一直默默无闻

9
00:00:37.456 --> 00:00:41.300
when it became popularized by
the Ruby on Rails framework.
后来因为Ruby on Rails的框架而流行起来

10
00:00:42.510 --> 00:00:43.873
Ruby is dynamic, so
Ruby是动态的

11
00:00:43.873 --> 00:00:49.580
if you're used to language like Java that
is statically tight, this is different.
所以，如果你习惯使用Java这样静态的语言
会发现Ruby很不一样

12
00:00:50.580 --> 00:00:55.680
Ruby is also object oriented and pretty
much everything in Ruby is an object.
Ruby是面向对象的，几乎所有在Ruby离的东西都是对象。

13
00:00:56.760 --> 00:01:02.730
Again, making reference to Java, there's
no such thing as a primitive type in Ruby,
和Jave比起来，Ruby里面没有原始类型。

14
00:01:02.730 --> 00:01:05.840
even an integer is a full fledged object.
即便是一个整数也是一个成熟的对象

15
00:01:05.840 --> 00:01:09.920
But, most importantly, Ruby is elegant,
expressive, and declarative.
最重要的是，Ruby是优雅的，有表现力的，陈述式的语言

16
00:01:09.920 --> 00:01:13.110
These are the three words I would
use to describe it as a language.
这是我会用来形容Ruby的三个词。

17
00:01:13.110 --> 00:01:19.270
And like Matz himself once said, Ruby
was designed to make programmers happy.
就像发明人Matz说的一样，Ruby是为了让开发者快乐而生的。

18
00:01:19.270 --> 00:01:22.640
So that's nice to use as slogan but
what does it really mean?
口号喊起来容易，但究竟是什么意思呢？

19
00:01:22.640 --> 00:01:24.970
Let's take a look at a real example.
让我们看个实例

20
00:01:24.970 --> 00:01:27.550
Let's say we have a task in front of us.
假设我们现在有个任务

21
00:01:27.550 --> 00:01:29.990
To print Hello World three times.
我们要print三次“Hello World”

22
00:01:29.990 --> 00:01:32.080
How would you accomplish
this task in Java?
如果是用Java你要怎么完成这个任务呢？

23
00:01:32.080 --> 00:01:35.090
Well in Java you would have a class,
you would have a main,
用Jave，你得有个类，还得有个main

24
00:01:35.090 --> 00:01:37.410
you would have a for loop and
you would have an i variable 
你得有个循环，还得有个变量i

25
00:01:37.410 --> 00:01:42.110
for example that goes from zero to three and
it keeps getting incremented.
这个i从0到3，不断增加

26
00:01:42.110 --> 00:01:46.172
Then we actually have
the business logic inside the for
然后，我们的循环里就有了业务逻辑

27
00:01:46.172 --> 00:01:49.020
loop that prints out Hello World.
可以输出Hello World

28
00:01:49.020 --> 00:01:50.750
What is wrong with this program?
这样变成有什么问题吗？


29
00:01:50.750 --> 00:01:53.310
There is nothing wrong with it,
but if you notice,
没问题，但是如果你细心的话

30
00:01:53.310 --> 00:01:55.820
your brain is doing two different
things at the same time.
你会发现你的大脑同时在做两件事

31
00:01:55.820 --> 00:01:58.369
Your brain is keeping track of the for
loop, and
你的大脑一遍要注意循环

32
00:01:58.369 --> 00:02:02.280
your brain is also keeping track of
a business logic inside the for loop.
同时，还要盯着循环里的业务逻辑

33
00:02:03.320 --> 00:02:07.250
Whereas what you really want to do,
is you want to do something
然而，你想要的，是告诉电脑输出三次“Hello World”就好了。

34
00:02:07.250 --> 00:02:12.290
that Ruby lets you do is just say
three times puts "Hello World".
Ruby就能做到

35
00:02:12.290 --> 00:02:17.560
And you could do this
because 3 is a full fledged
你能这么做，是因为在Ruby里，3是一个完整的对象

36
00:02:17.560 --> 00:02:22.400
object and times is just a method,
and we'll discuss what this is later.
次数（times）是一种方法，这块我们后面会讲到

37
00:02:23.560 --> 00:02:25.440
Back to some Ruby basics.
回到Ruby的基础

38
00:02:25.440 --> 00:02:30.880
So in Ruby you have a two space
indentation for each nested level.
在Ruby里，每个层级有两个空格的缩进

39
00:02:30.880 --> 00:02:36.830
That's encouraged, it's not required
like in Python, but it is encouraged.
和Python一样，这样做不是必须的，但是这么做好
我希望你们这么做

40
00:02:36.830 --> 00:02:40.350
And you use pound for comments.
你可以用井号键做注释

41
00:02:40.350 --> 00:02:44.010
Now, again comments should be used in
moderation because the language itself is
做注释要适量，因为这门语言本身

42
00:02:44.010 --> 00:02:46.830
designed to be very expressive.
就非常有表现力

43
00:02:48.320 --> 00:02:50.550
So here are some examples
on how you do that.
我们看些例子

44
00:02:50.550 --> 00:02:52.240
Now, look at this over here.
看这里

45
00:02:52.240 --> 00:02:53.580
Three, what is three?
3，什么是3？

46
00:02:53.580 --> 00:02:57.380
Well three is probably the shortest
Ruby program you'll ever write,
3，可能是最短的Ruby程序了

47
00:02:57.380 --> 00:03:00.560
it basically is an integer
that gets evaluated.
这就是个可以求值的整数

48
00:03:00.560 --> 00:03:04.060
As a matter of fact, pretty much
everything in Ruby gets evaluated.
事实上，几乎Ruby里面的所有东西可以求值。

49
00:03:05.690 --> 00:03:10.790
Maybe in some other languages three would
be flagged by a compiler as an error
也许在其他语言里，3会被编译器标记为错误

50
00:03:10.790 --> 00:03:15.840
because this three is not doing anything,
it's not being assigned to a variable,
因为这个3没有做任何事情，它没有被指派给一个变量

51
00:03:15.840 --> 00:03:19.589
it's not used as part of a different
statement, so what is three?
它没有被用作另一个语句的一部分，那么，3是什么呢？

52
00:03:19.589 --> 00:03:20.410
But that's okay.
没关系

53
00:03:20.410 --> 00:03:25.200
In Ruby it is perfectly
legal to have that.
在Ruby里这么做是全完合法的

54
00:03:25.200 --> 00:03:29.880
The three gets evaluated, and
we will see later on how that's useful.
3可以求值，我们后面可以看怎么用

55
00:03:29.880 --> 00:03:33.560
In my slides, a lot of times I'll use puts
在我的幻灯片里面，我会用很多puts命令

56
00:03:33.560 --> 00:03:37.260
to show you that something is
being printed out to the console.
来给你们展示Console输出的东西

57
00:03:37.260 --> 00:03:44.470
Puts stands for put string, that's just
the concatenation of those two words.
puts表示输出字符串（string），这是两个词英文单词的缩写（put string）

58
00:03:44.470 --> 00:03:48.880
Puts, and it also prints a new
line after that, after itself.
执行puts命令后，也会输出新的一行新代码，在puts命令后面

59
00:03:48.880 --> 00:03:52.900
So, it's similar to how
system.out.println works in Java.
所以，这跟Java里面的 system.out.println效果类似

60
00:03:52.900 --> 00:03:56.940
There is also another form that I
will use sometimes, which is P, and
这是另一个我时常会用的形式是p

61
00:03:56.940 --> 00:04:00.580
this just prints out internal
representation of an object, and
这个就只是输出对象的内部表征

62
00:04:00.580 --> 00:04:05.570
sometimes it is use for instead of puts,
and I'll show you when.
有时候它被用来替代Puts，我到时候会用给你们看。

63
00:04:05.570 --> 00:04:09.559
If you have a Ruby file,
如果你有一个Ruby文件

64
00:04:09.559 --> 00:04:16.600
let's say test.rb, for example, where
it just has puts 3 to execute the file.
假设名字为test.rb，里面就是输入3，然后执行文件

65
00:04:16.600 --> 00:04:21.166
If you're doing it from Sublime,
you would do command+B, or
如果你用的编辑器是Sublime，你就按command+B

66
00:04:21.166 --> 00:04:24.280
control+B if you're on Windows.
如果你用Windows开发，就按control+B

67
00:04:24.280 --> 00:04:28.730
And if you wanna execute the file from
a command line, you would just do Ruby,
如果你想要从一个命令行来执行文件，你就用Ruby

68
00:04:28.730 --> 00:04:31.310
space, and the name of the file.
空格，文件名

69
00:04:31.310 --> 00:04:37.060
And hopefully you're following along with
your own laptop and banging out some code.
希望你是用自己的笔记本，可以写几行代码

70
00:04:38.360 --> 00:04:41.220
Okay, some more conventions,
we have variables.
来看更多的惯例，
我们有变量

71
00:04:42.350 --> 00:04:46.450
Variables should all be named lower case,
or
变量要用小写字母

72
00:04:46.450 --> 00:04:50.090
if you have multiple words
in the same variable name,
或者，如果你的一个变量里有多个单词

73
00:04:50.090 --> 00:04:54.550
you should use what's called a snake case,
which is basically an underscore
你就得也难怪下划线把它们连在一起

74
00:04:54.550 --> 00:04:59.010
in between the two words that you
are trying to name a variable with.
在这两个词之间，你尝试命名一个变量

75
00:05:00.240 --> 00:05:02.850
If you have a constant,
something that's never gonna change, for
如果你有一个常量，
永远不会变

76
00:05:02.850 --> 00:05:08.450
example the value of pi,
you would use either all caps or
例如，圆周率，要么你就都大写

77
00:05:08.450 --> 00:05:14.320
you would use what's called a CamelCase
where the first letter is capitalized.
要么你就首字母大写

78
00:05:14.320 --> 00:05:19.235
So basically as long as the first letter
is capitalized, you're fine for constants.
所以，只要首字母大写，就可以表示常量

79
00:05:19.235 --> 00:05:23.830
In classes and modules, for their names,
对类和组件来说

80
00:05:23.830 --> 00:05:28.600
you would also use a CamelCase where
the first letter is capitalized.
你就用CamelCase，首字母大写

81
00:05:29.820 --> 00:05:33.990
Semicolons, there's no
reason to have semicolons.
分号，不要用就好了

82
00:05:33.990 --> 00:05:35.730
A lot of times they just post the code so
很多时候，写代码

83
00:05:35.730 --> 00:05:39.240
you could happily leave semicolons
off at the end of a line.
可以在结尾加上分号

84
00:05:40.630 --> 00:05:45.000
Now if you do wanna have multiple
statements on the same line,
一行代码，你要表述很多内容

85
00:05:45.000 --> 00:05:50.900
then you can use a semicolon in between
those two statements to separate them,
你可以用分号隔开两个表述

86
00:05:50.900 --> 00:05:53.270
but this is usually highly discouraged.
但是我强烈不推荐

87
00:05:53.270 --> 00:05:57.380
Putting multiple statements in the same
line makes the code less readable.
你把多个表述放在一行代码里，代码的可读性就降低了

88
00:05:57.380 --> 00:06:02.920
I will do it sometimes in my slides
just if I want to show a complete
我有时候会这么干，那是因为

89
00:06:02.920 --> 00:06:08.090
example in my slides, but
there is really no reason to do that.
我得把内容挤进PPT里，
正常写代码就别那么干

90
00:06:08.090 --> 00:06:15.650
Another way to execute Ruby code
is to use something called IRB.
另一种执行Ruby代码的方式是irb

91
00:06:15.650 --> 00:06:20.380
IRB is basically interactive Ruby,
it's a REPL if you're familiar with that.
irb就是交互式的Ruby
这是一种REPL，不知道你们是否熟悉

92
00:06:20.380 --> 00:06:24.020
That's basically
Read Evaluate Print Loop so
全称是读取-求值-输出-循环

93
00:06:24.020 --> 00:06:30.110
you're able to type IRB in the command
line, this comes with a Ruby installation,
你在命令行输入IRB，前提是你装过Ruby

94
00:06:30.110 --> 00:06:36.340
and just start plugging away putting in
Ruby code, so for example, hello world.
然后输入Ruby代码，例如，“hello world”

95
00:06:37.520 --> 00:06:39.590
Well, you might ask what is hello world?
或许你会问，什么是“hello world”

96
00:06:39.590 --> 00:06:41.160
It's not been printed out.
没有要求输出

97
00:06:42.490 --> 00:06:45.696
But the irb will tell
you that that's okay.
但是irb不觉得有问题

98
00:06:45.696 --> 00:06:50.396
It's just a string variable
that's been evaluated and
这就是个字符串变量
求值

99
00:06:50.396 --> 00:06:53.600
it will get evaluated to hello world.
会得出“hello world”

100
00:06:54.630 --> 00:06:59.600
Now, you also could print out hello world,
which is what this is doing, and
你也可以要求输出“hello world”

101
00:06:59.600 --> 00:07:02.150
this is saying puts hello world.
用puts“hello world”

102
00:07:02.150 --> 00:07:08.180
So, you'll see that as a side effect of
the puts method, hello world gets printed,
你看这puts方法有个副作用，的确输出了“hello world”

103
00:07:08.180 --> 00:07:13.620
now, what puts actually returns is a nil,
doesn't return anything.
然而，那puts返回的是nil，什么都没有。

104
00:07:13.620 --> 00:07:19.440
So, if you think about it, puts is
just the method that returns nothing,
认真一想就知道，puts这种方法，返回值就是nil

105
00:07:19.440 --> 00:07:23.310
but as part of its execution,
it prints out hello world.
但是在执行的时候，它输出了hello world

106
00:07:24.910 --> 00:07:30.000
So, again, important concept, but anything
evaluates to something, pretty much.
所以，重要的事情再说一遍，任何东西都可以求值

107
00:07:31.010 --> 00:07:34.286
And you don't have to assign something
to a variable for it to get evaluated,
你不需要指派一个变量，就可以求值

108
00:07:34.286 --> 00:07:39.680
and another thing to note here
is that puts returns nil.
另外一个就是，puts返回值是nil

109
00:07:39.680 --> 00:07:42.330
So in summary,
Ruby is extremely expressive and
简而言之
Ruby是极具表现力的

110
00:07:42.330 --> 00:07:46.240
hopefully you've seen this from
the few slides that we just did.
希望从这些PPT里你能理解

111
00:07:46.240 --> 00:07:50.410
And the other concept you should
take away is that everything, and
另一个知识点，你得掌握

112
00:07:50.410 --> 00:07:55.410
I mean everything, is evaluated in Ruby,
and we'll see how that's useful later on.
所有东西，在Ruby里都可以求值
我后面会讲这有什么用

113
00:07:55.410 --> 00:07:56.500
So, what are we doing next?
下一节讲什么呢？

114
00:07:56.500 --> 00:07:59.310
Next, we're going to talk about
the flow of control in Ruby.
我们来讲Ruby里的流程控制
